// <auto-generated />
using System;
using Database.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Database.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250110144939_replacePushNotificationWithDeviceNotificationConfig")]
    partial class replacePushNotificationWithDeviceNotificationConfig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ChatsUsers", b =>
                {
                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("ChatId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("ChatsUsers", (string)null);
                });

            modelBuilder.Entity("Database.Entities.ChatEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Chats", (string)null);
                });

            modelBuilder.Entity("Database.Entities.CountryCodesEntity", b =>
                {
                    b.Property<string>("Country")
                        .HasColumnType("text");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Country");

                    b.HasIndex("Code");

                    b.ToTable("CountryCodes", (string)null);
                });

            modelBuilder.Entity("Database.Entities.DeviceNotificationConfigEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsNotificationEnabled")
                        .HasColumnType("boolean");

                    b.Property<int>("OperatingSystem")
                        .HasColumnType("integer");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("UserEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("DeviceNotifications", (string)null);
                });

            modelBuilder.Entity("Database.Entities.FriendshipEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SenderUserId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int>("TargetUserId")
                        .HasColumnType("integer");

                    b.Property<int?>("UserEntityId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SenderUserId");

                    b.HasIndex("TargetUserId");

                    b.HasIndex("UserEntityId");

                    b.ToTable("Friendships", (string)null);
                });

            modelBuilder.Entity("Database.Entities.MessageEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("ChatId")
                        .HasColumnType("integer");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("Database.Entities.MessageStatusEntity", b =>
                {
                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<bool>("StatusUpdateDeliveryConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("MessageId", "ReceiverId", "Status");

                    b.HasIndex("ReceiverId");

                    b.ToTable("MessagesStatus");
                });

            modelBuilder.Entity("Database.Entities.UserDeviceEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeviceId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int?>("DeviceNotificationsConfigId")
                        .HasColumnType("integer");

                    b.Property<bool>("IsVerified")
                        .HasColumnType("boolean");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceNotificationsConfigId");

                    b.HasIndex("UserId");

                    b.ToTable("UserDevices", (string)null);
                });

            modelBuilder.Entity("Database.Entities.UserEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityAlwaysColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Database.Entities.UserLoginCodeEntity", b =>
                {
                    b.Property<int>("UserDeviceId")
                        .HasColumnType("integer");

                    b.Property<Guid>("SecretLoginCode")
                        .HasMaxLength(36)
                        .HasColumnType("uuid");

                    b.HasKey("UserDeviceId");

                    b.ToTable("UserLoginCodes", (string)null);
                });

            modelBuilder.Entity("ChatsUsers", b =>
                {
                    b.HasOne("Database.Entities.ChatEntity", null)
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatsUsers_Chats_ChatId");

                    b.HasOne("Database.Entities.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChatsUsers_Users_UserId");
                });

            modelBuilder.Entity("Database.Entities.DeviceNotificationConfigEntity", b =>
                {
                    b.HasOne("Database.Entities.UserDeviceEntity", "UserDevice")
                        .WithMany()
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceNotificationConfig_UserDevices_DeviceId");

                    b.HasOne("Database.Entities.UserEntity", null)
                        .WithMany("DeviceNotificationsConfig")
                        .HasForeignKey("UserEntityId");

                    b.HasOne("Database.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DeviceNotificationConfig_Users_UserId");

                    b.Navigation("User");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("Database.Entities.FriendshipEntity", b =>
                {
                    b.HasOne("Database.Entities.UserEntity", "Sender")
                        .WithMany("SentFriendships")
                        .HasForeignKey("SenderUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Friendships_SenderUserId_Users_Id");

                    b.HasOne("Database.Entities.UserEntity", "Target")
                        .WithMany("ReceivedFriendships")
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Friendships_TargetUserId_Users_Id");

                    b.HasOne("Database.Entities.UserEntity", null)
                        .WithMany("Friendships")
                        .HasForeignKey("UserEntityId");

                    b.Navigation("Sender");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("Database.Entities.MessageEntity", b =>
                {
                    b.HasOne("Database.Entities.ChatEntity", "Chat")
                        .WithMany()
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chat");
                });

            modelBuilder.Entity("Database.Entities.MessageStatusEntity", b =>
                {
                    b.HasOne("Database.Entities.MessageEntity", "Message")
                        .WithMany("MessageStatusEntities")
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Database.Entities.UserEntity", "Receiver")
                        .WithMany("MessageStatusEntities")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("Database.Entities.UserDeviceEntity", b =>
                {
                    b.HasOne("Database.Entities.DeviceNotificationConfigEntity", "DeviceNotificationsConfig")
                        .WithMany()
                        .HasForeignKey("DeviceNotificationsConfigId");

                    b.HasOne("Database.Entities.UserEntity", "User")
                        .WithMany("UserDevices")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserDevices_UserId_Users_Id");

                    b.Navigation("DeviceNotificationsConfig");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Database.Entities.UserLoginCodeEntity", b =>
                {
                    b.HasOne("Database.Entities.UserDeviceEntity", "UserDevice")
                        .WithOne("UserLoginCode")
                        .HasForeignKey("Database.Entities.UserLoginCodeEntity", "UserDeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_UserLoginCodes_UserDeviceId_UserDevices_Id");

                    b.Navigation("UserDevice");
                });

            modelBuilder.Entity("Database.Entities.MessageEntity", b =>
                {
                    b.Navigation("MessageStatusEntities");
                });

            modelBuilder.Entity("Database.Entities.UserDeviceEntity", b =>
                {
                    b.Navigation("UserLoginCode");
                });

            modelBuilder.Entity("Database.Entities.UserEntity", b =>
                {
                    b.Navigation("DeviceNotificationsConfig");

                    b.Navigation("Friendships");

                    b.Navigation("MessageStatusEntities");

                    b.Navigation("ReceivedFriendships");

                    b.Navigation("SentFriendships");

                    b.Navigation("UserDevices");
                });
#pragma warning restore 612, 618
        }
    }
}
